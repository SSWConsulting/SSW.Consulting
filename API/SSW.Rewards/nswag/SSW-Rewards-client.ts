/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class BaseClient {
    public token: string = "";
    private readonly AUTH_HEADER = "Authorization";

    setAuthToken(token: string): void {
        this.token = token;
    }

    transformOptions(options: any): Promise<any> {
        options.headers[this.AUTH_HEADER] = `Bearer ${this.token}`;
        return Promise.resolve(options);
    }
}

export interface IAchievementClient {
    list(): Promise<AchievementListViewModel>;
    adminList(): Promise<AchievementAdminListViewModel>;
    create(command: CreateAchievementCommand): Promise<AchievementAdminViewModel>;
    add(achievementCode: string | null): Promise<AchievementViewModel>;
    post(achievementCode: string | null): Promise<PostAchievementResult>;
    techQuiz(user: string | null): Promise<FileResponse>;
}

export class AchievementClient extends BaseClient implements IAchievementClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    list(): Promise<AchievementListViewModel> {
        let url_ = this.baseUrl + "/api/Achievement/List";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processList(_response);
        });
    }

    protected processList(response: Response): Promise<AchievementListViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AchievementListViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AchievementListViewModel>(<any>null);
    }

    adminList(): Promise<AchievementAdminListViewModel> {
        let url_ = this.baseUrl + "/api/Achievement/AdminList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAdminList(_response);
        });
    }

    protected processAdminList(response: Response): Promise<AchievementAdminListViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AchievementAdminListViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AchievementAdminListViewModel>(<any>null);
    }

    create(command: CreateAchievementCommand): Promise<AchievementAdminViewModel> {
        let url_ = this.baseUrl + "/api/Achievement/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<AchievementAdminViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AchievementAdminViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AchievementAdminViewModel>(<any>null);
    }

    add(achievementCode: string | null): Promise<AchievementViewModel> {
        let url_ = this.baseUrl + "/api/Achievement/Add?";
        if (achievementCode === undefined)
            throw new Error("The parameter 'achievementCode' must be defined.");
        else
            url_ += "achievementCode=" + encodeURIComponent("" + achievementCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: Response): Promise<AchievementViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AchievementViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AchievementViewModel>(<any>null);
    }

    post(achievementCode: string | null): Promise<PostAchievementResult> {
        let url_ = this.baseUrl + "/api/Achievement/Post?";
        if (achievementCode === undefined)
            throw new Error("The parameter 'achievementCode' must be defined.");
        else
            url_ += "achievementCode=" + encodeURIComponent("" + achievementCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<PostAchievementResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PostAchievementResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PostAchievementResult>(<any>null);
    }

    techQuiz(user: string | null): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Achievement/TechQuiz?";
        if (user === undefined)
            throw new Error("The parameter 'user' must be defined.");
        else
            url_ += "user=" + encodeURIComponent("" + user) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processTechQuiz(_response);
        });
    }

    protected processTechQuiz(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export interface IAdminTestClient {
    admin(): Promise<FileResponse>;
    notAdmin(): Promise<FileResponse>;
}

export class AdminTestClient extends BaseClient implements IAdminTestClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    admin(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/AdminTest/Admin";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAdmin(_response);
        });
    }

    protected processAdmin(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    notAdmin(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/AdminTest/NotAdmin";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processNotAdmin(_response);
        });
    }

    protected processNotAdmin(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export interface ILeaderboardClient {
    get(): Promise<LeaderboardListViewModel>;
}

export class LeaderboardClient extends BaseClient implements ILeaderboardClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Promise<LeaderboardListViewModel> {
        let url_ = this.baseUrl + "/api/Leaderboard/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<LeaderboardListViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LeaderboardListViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LeaderboardListViewModel>(<any>null);
    }
}

export interface IRewardClient {
    list(): Promise<RewardListViewModel>;
    adminList(): Promise<RewardAdminListViewModel>;
    add(rewardCode: string | null): Promise<ClaimRewardResult>;
}

export class RewardClient extends BaseClient implements IRewardClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    list(): Promise<RewardListViewModel> {
        let url_ = this.baseUrl + "/api/Reward/List";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processList(_response);
        });
    }

    protected processList(response: Response): Promise<RewardListViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RewardListViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RewardListViewModel>(<any>null);
    }

    adminList(): Promise<RewardAdminListViewModel> {
        let url_ = this.baseUrl + "/api/Reward/AdminList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAdminList(_response);
        });
    }

    protected processAdminList(response: Response): Promise<RewardAdminListViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RewardAdminListViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RewardAdminListViewModel>(<any>null);
    }

    add(rewardCode: string | null): Promise<ClaimRewardResult> {
        let url_ = this.baseUrl + "/api/Reward/Add?";
        if (rewardCode === undefined)
            throw new Error("The parameter 'rewardCode' must be defined.");
        else
            url_ += "rewardCode=" + encodeURIComponent("" + rewardCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: Response): Promise<ClaimRewardResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClaimRewardResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ClaimRewardResult>(<any>null);
    }
}

export interface IStaffClient {
    get(): Promise<StaffListViewModel>;
}

export class StaffClient extends BaseClient implements IStaffClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Promise<StaffListViewModel> {
        let url_ = this.baseUrl + "/api/Staff/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<StaffListViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StaffListViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StaffListViewModel>(<any>null);
    }
}

export interface IUserClient {
    get(): Promise<CurrentUserViewModel>;
    achievements(userId: number): Promise<UserAchievementsViewModel>;
    rewards(userId: number): Promise<UserRewardsViewModel>;
    uploadProfilePic(file: FileParameter | null): Promise<string>;
}

export class UserClient extends BaseClient implements IUserClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Promise<CurrentUserViewModel> {
        let url_ = this.baseUrl + "/api/User/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<CurrentUserViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CurrentUserViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CurrentUserViewModel>(<any>null);
    }

    achievements(userId: number): Promise<UserAchievementsViewModel> {
        let url_ = this.baseUrl + "/api/User/Achievements?";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined and cannot be null.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAchievements(_response);
        });
    }

    protected processAchievements(response: Response): Promise<UserAchievementsViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserAchievementsViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserAchievementsViewModel>(<any>null);
    }

    rewards(userId: number): Promise<UserRewardsViewModel> {
        let url_ = this.baseUrl + "/api/User/Rewards?";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined and cannot be null.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRewards(_response);
        });
    }

    protected processRewards(response: Response): Promise<UserRewardsViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserRewardsViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserRewardsViewModel>(<any>null);
    }

    uploadProfilePic(file: FileParameter | null): Promise<string> {
        let url_ = this.baseUrl + "/api/User/UploadProfilePic";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUploadProfilePic(_response);
        });
    }

    protected processUploadProfilePic(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }
}

export class AchievementListViewModel implements IAchievementListViewModel {
    achievements?: AchievementViewModel[] | undefined;

    constructor(data?: IAchievementListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["achievements"])) {
                this.achievements = [] as any;
                for (let item of data["achievements"])
                    this.achievements!.push(AchievementViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AchievementListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AchievementListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.achievements)) {
            data["achievements"] = [];
            for (let item of this.achievements)
                data["achievements"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAchievementListViewModel {
    achievements?: AchievementViewModel[] | undefined;
}

export class AchievementViewModel implements IAchievementViewModel {
    id?: number;
    name?: string | undefined;
    value?: number;

    constructor(data?: IAchievementViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): AchievementViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AchievementViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface IAchievementViewModel {
    id?: number;
    name?: string | undefined;
    value?: number;
}

export class AchievementAdminListViewModel implements IAchievementAdminListViewModel {
    achievements?: AchievementAdminViewModel[] | undefined;

    constructor(data?: IAchievementAdminListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["achievements"])) {
                this.achievements = [] as any;
                for (let item of data["achievements"])
                    this.achievements!.push(AchievementAdminViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AchievementAdminListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AchievementAdminListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.achievements)) {
            data["achievements"] = [];
            for (let item of this.achievements)
                data["achievements"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAchievementAdminListViewModel {
    achievements?: AchievementAdminViewModel[] | undefined;
}

export class AchievementAdminViewModel implements IAchievementAdminViewModel {
    id?: number;
    name?: string | undefined;
    value?: number;
    code?: string | undefined;

    constructor(data?: IAchievementAdminViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.value = data["value"];
            this.code = data["code"];
        }
    }

    static fromJS(data: any): AchievementAdminViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AchievementAdminViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["value"] = this.value;
        data["code"] = this.code;
        return data; 
    }
}

export interface IAchievementAdminViewModel {
    id?: number;
    name?: string | undefined;
    value?: number;
    code?: string | undefined;
}

export class CreateAchievementCommand implements ICreateAchievementCommand {
    name?: string | undefined;
    value?: number;

    constructor(data?: ICreateAchievementCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): CreateAchievementCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAchievementCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface ICreateAchievementCommand {
    name?: string | undefined;
    value?: number;
}

export class PostAchievementResult implements IPostAchievementResult {
    viewModel?: AchievementViewModel | undefined;
    status?: AchievementStatus;

    constructor(data?: IPostAchievementResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.viewModel = data["viewModel"] ? AchievementViewModel.fromJS(data["viewModel"]) : <any>undefined;
            this.status = data["status"];
        }
    }

    static fromJS(data: any): PostAchievementResult {
        data = typeof data === 'object' ? data : {};
        let result = new PostAchievementResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["viewModel"] = this.viewModel ? this.viewModel.toJSON() : <any>undefined;
        data["status"] = this.status;
        return data; 
    }
}

export interface IPostAchievementResult {
    viewModel?: AchievementViewModel | undefined;
    status?: AchievementStatus;
}

export enum AchievementStatus {
    Added = 0,
    NotFound = 1,
    Duplicate = 2,
    Error = 3,
}

export class LeaderboardListViewModel implements ILeaderboardListViewModel {
    users?: LeaderboardUserDto[] | undefined;

    constructor(data?: ILeaderboardListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["users"])) {
                this.users = [] as any;
                for (let item of data["users"])
                    this.users!.push(LeaderboardUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LeaderboardListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new LeaderboardListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILeaderboardListViewModel {
    users?: LeaderboardUserDto[] | undefined;
}

export class LeaderboardUserDto implements ILeaderboardUserDto {
    rank?: number;
    userId?: number;
    name?: string | undefined;
    profilePic?: string | undefined;
    points?: number;

    constructor(data?: ILeaderboardUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.rank = data["rank"];
            this.userId = data["userId"];
            this.name = data["name"];
            this.profilePic = data["profilePic"];
            this.points = data["points"];
        }
    }

    static fromJS(data: any): LeaderboardUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new LeaderboardUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rank"] = this.rank;
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["profilePic"] = this.profilePic;
        data["points"] = this.points;
        return data; 
    }
}

export interface ILeaderboardUserDto {
    rank?: number;
    userId?: number;
    name?: string | undefined;
    profilePic?: string | undefined;
    points?: number;
}

export class RewardListViewModel implements IRewardListViewModel {
    rewards?: RewardViewModel[] | undefined;

    constructor(data?: IRewardListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["rewards"])) {
                this.rewards = [] as any;
                for (let item of data["rewards"])
                    this.rewards!.push(RewardViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RewardListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RewardListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rewards)) {
            data["rewards"] = [];
            for (let item of this.rewards)
                data["rewards"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRewardListViewModel {
    rewards?: RewardViewModel[] | undefined;
}

export class RewardViewModel implements IRewardViewModel {
    id?: number;
    name?: string | undefined;
    cost?: number;

    constructor(data?: IRewardViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.cost = data["cost"];
        }
    }

    static fromJS(data: any): RewardViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RewardViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["cost"] = this.cost;
        return data; 
    }
}

export interface IRewardViewModel {
    id?: number;
    name?: string | undefined;
    cost?: number;
}

export class RewardAdminListViewModel implements IRewardAdminListViewModel {
    rewards?: RewardAdminViewModel[] | undefined;

    constructor(data?: IRewardAdminListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["rewards"])) {
                this.rewards = [] as any;
                for (let item of data["rewards"])
                    this.rewards!.push(RewardAdminViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RewardAdminListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RewardAdminListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rewards)) {
            data["rewards"] = [];
            for (let item of this.rewards)
                data["rewards"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRewardAdminListViewModel {
    rewards?: RewardAdminViewModel[] | undefined;
}

export class RewardAdminViewModel implements IRewardAdminViewModel {
    id?: number;
    name?: string | undefined;
    cost?: number;
    code?: string | undefined;

    constructor(data?: IRewardAdminViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.cost = data["cost"];
            this.code = data["code"];
        }
    }

    static fromJS(data: any): RewardAdminViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RewardAdminViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["cost"] = this.cost;
        data["code"] = this.code;
        return data; 
    }
}

export interface IRewardAdminViewModel {
    id?: number;
    name?: string | undefined;
    cost?: number;
    code?: string | undefined;
}

export class ClaimRewardResult implements IClaimRewardResult {
    viewModel?: RewardViewModel | undefined;
    status?: RewardStatus;

    constructor(data?: IClaimRewardResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.viewModel = data["viewModel"] ? RewardViewModel.fromJS(data["viewModel"]) : <any>undefined;
            this.status = data["status"];
        }
    }

    static fromJS(data: any): ClaimRewardResult {
        data = typeof data === 'object' ? data : {};
        let result = new ClaimRewardResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["viewModel"] = this.viewModel ? this.viewModel.toJSON() : <any>undefined;
        data["status"] = this.status;
        return data; 
    }
}

export interface IClaimRewardResult {
    viewModel?: RewardViewModel | undefined;
    status?: RewardStatus;
}

export enum RewardStatus {
    Claimed = 0,
    NotFound = 1,
    Duplicate = 2,
    NotEnoughPoints = 3,
    Error = 4,
}

export class StaffListViewModel implements IStaffListViewModel {
    staff?: StaffDto[] | undefined;

    constructor(data?: IStaffListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["staff"])) {
                this.staff = [] as any;
                for (let item of data["staff"])
                    this.staff!.push(StaffDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StaffListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new StaffListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.staff)) {
            data["staff"] = [];
            for (let item of this.staff)
                data["staff"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IStaffListViewModel {
    staff?: StaffDto[] | undefined;
}

export class StaffDto implements IStaffDto {
    name?: string | undefined;
    title?: string | undefined;
    email?: string | undefined;
    profile?: string | undefined;
    profilePhoto?: string | undefined;
    twitterUsername?: string | undefined;
    isExternal?: boolean;
    skills?: string[] | undefined;

    constructor(data?: IStaffDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.title = data["title"];
            this.email = data["email"];
            this.profile = data["profile"];
            this.profilePhoto = data["profilePhoto"];
            this.twitterUsername = data["twitterUsername"];
            this.isExternal = data["isExternal"];
            if (Array.isArray(data["skills"])) {
                this.skills = [] as any;
                for (let item of data["skills"])
                    this.skills!.push(item);
            }
        }
    }

    static fromJS(data: any): StaffDto {
        data = typeof data === 'object' ? data : {};
        let result = new StaffDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["title"] = this.title;
        data["email"] = this.email;
        data["profile"] = this.profile;
        data["profilePhoto"] = this.profilePhoto;
        data["twitterUsername"] = this.twitterUsername;
        data["isExternal"] = this.isExternal;
        if (Array.isArray(this.skills)) {
            data["skills"] = [];
            for (let item of this.skills)
                data["skills"].push(item);
        }
        return data; 
    }
}

export interface IStaffDto {
    name?: string | undefined;
    title?: string | undefined;
    email?: string | undefined;
    profile?: string | undefined;
    profilePhoto?: string | undefined;
    twitterUsername?: string | undefined;
    isExternal?: boolean;
    skills?: string[] | undefined;
}

export class CurrentUserViewModel implements ICurrentUserViewModel {
    id?: number;
    email?: string | undefined;
    fullName?: string | undefined;
    profilePic?: string | undefined;
    points?: number;

    constructor(data?: ICurrentUserViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.email = data["email"];
            this.fullName = data["fullName"];
            this.profilePic = data["profilePic"];
            this.points = data["points"];
        }
    }

    static fromJS(data: any): CurrentUserViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CurrentUserViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["fullName"] = this.fullName;
        data["profilePic"] = this.profilePic;
        data["points"] = this.points;
        return data; 
    }
}

export interface ICurrentUserViewModel {
    id?: number;
    email?: string | undefined;
    fullName?: string | undefined;
    profilePic?: string | undefined;
    points?: number;
}

export class UserAchievementsViewModel implements IUserAchievementsViewModel {
    userId?: number;
    points?: number;
    userAchievements?: UserAchievementViewModel[] | undefined;

    constructor(data?: IUserAchievementsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.points = data["points"];
            if (Array.isArray(data["userAchievements"])) {
                this.userAchievements = [] as any;
                for (let item of data["userAchievements"])
                    this.userAchievements!.push(UserAchievementViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserAchievementsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserAchievementsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["points"] = this.points;
        if (Array.isArray(this.userAchievements)) {
            data["userAchievements"] = [];
            for (let item of this.userAchievements)
                data["userAchievements"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserAchievementsViewModel {
    userId?: number;
    points?: number;
    userAchievements?: UserAchievementViewModel[] | undefined;
}

export class UserAchievementViewModel implements IUserAchievementViewModel {
    achievementName?: string | undefined;
    achievementValue?: number;
    complete?: boolean;
    awardedAt?: Date | undefined;

    constructor(data?: IUserAchievementViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.achievementName = data["achievementName"];
            this.achievementValue = data["achievementValue"];
            this.complete = data["complete"];
            this.awardedAt = data["awardedAt"] ? new Date(data["awardedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserAchievementViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserAchievementViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["achievementName"] = this.achievementName;
        data["achievementValue"] = this.achievementValue;
        data["complete"] = this.complete;
        data["awardedAt"] = this.awardedAt ? this.awardedAt.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUserAchievementViewModel {
    achievementName?: string | undefined;
    achievementValue?: number;
    complete?: boolean;
    awardedAt?: Date | undefined;
}

export class UserRewardsViewModel implements IUserRewardsViewModel {
    userId?: number;
    userRewards?: UserRewardViewModel[] | undefined;

    constructor(data?: IUserRewardsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            if (Array.isArray(data["userRewards"])) {
                this.userRewards = [] as any;
                for (let item of data["userRewards"])
                    this.userRewards!.push(UserRewardViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserRewardsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserRewardsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        if (Array.isArray(this.userRewards)) {
            data["userRewards"] = [];
            for (let item of this.userRewards)
                data["userRewards"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserRewardsViewModel {
    userId?: number;
    userRewards?: UserRewardViewModel[] | undefined;
}

export class UserRewardViewModel implements IUserRewardViewModel {
    rewardName?: string | undefined;
    rewardCost?: number;
    awarded?: boolean;
    awardedAt?: Date | undefined;

    constructor(data?: IUserRewardViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.rewardName = data["rewardName"];
            this.rewardCost = data["rewardCost"];
            this.awarded = data["awarded"];
            this.awardedAt = data["awardedAt"] ? new Date(data["awardedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserRewardViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserRewardViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rewardName"] = this.rewardName;
        data["rewardCost"] = this.rewardCost;
        data["awarded"] = this.awarded;
        data["awardedAt"] = this.awardedAt ? this.awardedAt.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUserRewardViewModel {
    rewardName?: string | undefined;
    rewardCost?: number;
    awarded?: boolean;
    awardedAt?: Date | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}