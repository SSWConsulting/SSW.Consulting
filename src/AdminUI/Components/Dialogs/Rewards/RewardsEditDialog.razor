@using Microsoft.AspNetCore.Components
@using SSW.Rewards.Admin.UI.Components.Dialogs.Confirmations
@using SSW.Rewards.Admin.UI.Models.Interfaces
@using MudBlazor
@using SSW.Rewards.Shared.DTOs.Leaderboard
@using SSW.Rewards.Shared.DTOs.Rewards
@using SSW.Rewards.ApiClient.Services

@inject ILeaderboardService leaderboardService
@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        <div class="d-flex justify-center">
            <AdminQRCode Height="200" QRCodeString="@Dto.Code"/>
        </div>
    </TitleContent>
    <DialogContent>
        <MudStack>
            <MudTextField @bind-Value="@Dto.Code" Label="Code" ReadOnly="true" Disabled="true"/>
            <MudTextField @bind-Value="@Dto.Name" Label="Name" ReadOnly="true"  Disabled="true"/>
            <MudTextField @bind-Value="@Dto.Cost" Label="Cost" AutoFocus="true" />
            <MudSelect
                @bind-Value="_selectedValue"
                T="@LeaderboardUserDto"
                Label="Assign to User"
                AnchorOrigin="Origin.TopCenter"
                TransformOrigin="Origin.BottomCenter"
                Variant="Variant.Outlined"
                AdornmentIcon="@Icons.Material.Filled.Search"
                AdornmentColor="Color.Primary">
                @foreach (var usr in _usersList.OrderBy(u => u.Name))
                {
                    <MudSelectItem Value="@usr">@usr.Name</MudSelectItem>
                }
            </MudSelect>
            <MudStack Row="true" Justify="Justify.SpaceBetween" Class="align-items-center">
                @if (!string.IsNullOrEmpty(_imageUrl))
                {
                    <MudImage id="profileImg" Src="@_imageUrl" Height="100" Width="100" Elevation="1" Alt="Reward thumbnail image"/>
                }
                else
                {
                    <MudPaper Height="100px" Width="100px" SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave">
                        <MudText Typo="Typo.body1">No Image</MudText>
                    </MudPaper>
                }
                
                <MudStack Row="false">
                    <MudTextField Class="d-inline" T="string" Label="Image" @bind-Value="@Dto.ImageFileName" Required="false" Disabled="true"/>
                    <DragDropFileUpload OnClick="OnPhotoUploadClick" Label="Upload a reward image"/>
                </MudStack>
            </MudStack>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Delete">Delete</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="AssignReward" Color="Color.Info">Redeem Reward for User</MudButton>
        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public RewardEditDto Dto { get; set; } = new();

    private string _imageUrl;
    private LeaderboardUserDto? _selectedValue;
    private IEnumerable<LeaderboardUserDto> _usersList = Enumerable.Empty<LeaderboardUserDto>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _usersList = (await leaderboardService.GetLeaderboard(CancellationToken.None)).Users;
        _imageUrl = Dto.ImageUri;
    }
    
    void Submit() => MudDialog?.Close(DialogResult.Ok(Dto));
    void Cancel() => MudDialog?.Cancel();
    async Task Delete()
    {
        var result = await DialogService.Show<SimpleConfirmationDialog>(
            $"Delete \"{Dto.Name}?\"",
            SimpleConfirmationDialog.CreateDialogParams(
                SimpleConfirmationDialogType.Danger,
                "Deleting will prevent future users from claiming points for this reward")
            ).Result;

        if (!result.Canceled && (bool) result.Data)
        {
            MudDialog?.Close(DialogResult.Ok(Dto.Id));
        }
    }

    // todo: could be worth making this a generic function. This functionality is used across many places
    private async Task OnPhotoUploadClick(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;

        var ms = new MemoryStream();

        await imageFile.OpenReadStream().CopyToAsync(ms);

        var bytes = ms.ToArray();

        Dto.ImageBytesInBase64 = Convert.ToBase64String(bytes);
        Dto.ImageFileName = imageFile.Name;
        _imageUrl = $"data:{Dto.ImageFileName};base64,{Dto.ImageBytesInBase64}";
    }

    void AssignReward()
    {
        if (_selectedValue == null)
        {
            return;
        }

        MudDialog?.Close(DialogResult.Ok(new AssignReward
        {
            Code = Dto.Code,
            Id = _selectedValue.UserId
        }));
    }
}