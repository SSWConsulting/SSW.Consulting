@page "/quizzes"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using SSW.Rewards.Admin.UI.Components
@using SSW.Rewards.Admin.UI.Models.Interfaces
@using SSW.Rewards.Shared.DTOs.Quizzes
@using SSW.Rewards.ApiClient.Services

@attribute [Authorize (Roles = "Staff, Admin")]
@inject IQuizAdminService quizService

@inject NavigationManager NavManager

<MudText Typo="Typo.h2">Quizzes</MudText>
<MudText Typo="Typo.body1">All active quizzes</MudText>


<Table TItem="QuizDetailsDto"
       Items="@(_model.Where(s => s.Title.Contains(_searchString, StringComparison.InvariantCultureIgnoreCase)))"
       TableTitle="Profiles"
       OnRowClick="OnRowClicked"
       IsLoading="@_loading">
    <ToolbarContent>
        <MudTextField @bind-Value="_searchString"
                      Placeholder="Search for a quiz"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                      Class="mt-0" />
    </ToolbarContent>
    <HeadingTemplate>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<QuizDetailsDto,object>(x => x.Title)">
                Title
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<QuizDetailsDto,object>(x => x.Description)">
                Description
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<QuizDetailsDto,object>(x => x.Points)">
                Points
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<QuizDetailsDto,object>(x => x.DateCreated)">
                Created on
            </MudTableSortLabel>
        </MudTh>
    </HeadingTemplate>
    <RowTemplate>
        <MudTd DataLabel="Title">
            @context.Title
        </MudTd>
        <MudTd DataLabel="Description">
            @context.Description
        </MudTd>
        <MudTd DataLabel="Points">
            @context.Points
        </MudTd>
        <MudTd DataLabel="DateCreated">
            @context.DateCreated.ToString("dd/MM/yyyy")
        </MudTd>
    </RowTemplate>
</Table>

<AuthorizeView Roles="Admin">
    <FabContainer>
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Href="add-quiz" />
    </FabContainer>
</AuthorizeView>

@code {
    private readonly DialogOptions disableBackdropClick = new() { DisableBackdropClick = true };
    private bool _loading = true;
    private string _searchString = string.Empty;
    private IEnumerable<QuizDetailsDto> _model = Enumerable.Empty<QuizDetailsDto>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetQuizzes();
    }
    private void OnRowClicked(TableRowClickEventArgs<QuizDetailsDto> obj)
    {
        NavManager.NavigateTo($"edit-quiz/{obj.Item.QuizId}");
    }
    private async Task GetQuizzes()
    {
        try
        {
            _loading = true;
            _model = (await quizService.GetAdminQuizList(CancellationToken.None));
            _loading = false;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}