@page "/rewards"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using SSW.Rewards.Admin.UI.Components
@using SSW.Rewards.Admin.UI.Components.Dialogs.Rewards
@using SSW.Rewards.Admin.UI.Models.Interfaces
@using SSW.Rewards.Shared.DTOs.Rewards
@using SSW.Rewards.ApiClient.Services

@attribute [Authorize (Roles = "Admin")]

@inject IRewardAdminService rewardAdminService
@inject IDialogService DialogService
@inject ISnackbar SnackBar

<MudText Typo="Typo.h2">Rewards</MudText>
<MudText Typo="Typo.body1">All rewards available to be claimed</MudText>

<Table TItem="RewardEditDto"
       Items="@(_model.Where(s => s.Name.Contains(_searchString, StringComparison.InvariantCultureIgnoreCase)))"
       TableTitle="Profiles"
       OnRowClick="OnRowClicked"
       IsLoading="@_loading">
    <ToolbarContent>
        <MudTextField @bind-Value="_searchString"
                      Placeholder="Search for a Reward"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                      Class="mt-0" />
    </ToolbarContent>
    <HeadingTemplate>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<RewardEditDto,object>(x => x.Code)" InitialDirection="SortDirection.Ascending">
                Code
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<RewardEditDto,object>(x => x.Name)">
                Name
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<RewardEditDto,object>(x => x.Cost)">
                Cost
            </MudTableSortLabel>
        </MudTh>
    </HeadingTemplate>
    <RowTemplate>
        <MudTd DataLabel="Code">
            <AdminQRCode QRCodeString="@context.Code" Height="100" />
        </MudTd>
        <MudTd DataLabel="Name">
            @context.Name
        </MudTd>
        <MudTd DataLabel="Cost">
            @context.Cost
        </MudTd>
    </RowTemplate>
</Table>

<FabContainer>
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@((e) => OpenDialog(disableBackdropClick))"/>
</FabContainer>

@code {
    private readonly DialogOptions disableBackdropClick = new() { DisableBackdropClick = true };
    private bool _loading = true;
    private string _searchString = string.Empty;
    private IEnumerable<RewardEditDto> _model = Enumerable.Empty<RewardEditDto>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetRewards();
    }

    private async Task GetRewards()
    {
        try
        {
            _loading = true;
            await Task.Delay(250);
            _model = (await rewardAdminService.GetRewards(CancellationToken.None)).Rewards;
            _loading = false;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task OnRowClicked(TableRowClickEventArgs<RewardEditDto> obj)
    {
        var item = _model.FirstOrDefault(x => x.Id == obj.Item.Id);

        // TODO: Implement this on the Api 
        //! Note: This is a readonly Dialog, which only allows for viewing and deleting.
        var parameters = new DialogParameters { ["Dto"]=item };
        var dialog = DialogService.Show<RewardsEditDialog>("Edit a Reward", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            switch (result.Data)
            {
                case int id:
                    await rewardAdminService.DeleteReward(id, CancellationToken.None);
                SnackBar.Add($"Reward deleted", Severity.Success);
                    break;
                case RewardEditDto dto:
                    await rewardAdminService.UpdateReward(dto, CancellationToken.None);
                    SnackBar.Add($"Reward: '{dto.Name}' saved", Severity.Success);
                    break;
                case AssignReward usr:
                    if (usr?.Id == null) return;

                    await rewardAdminService.ClaimForUser(usr.Code, usr.Id, false, CancellationToken.None);
                    // TODO: Add nice notification for returned status
                    
                    SnackBar.Add($"Reward claimed", Severity.Success);
                    break;
            }
            await GetRewards();
        }
    }

    private async Task OpenDialog(DialogOptions options)
    {
        var dialog = DialogService.Show<AddRewardDialog>("Create a Reward", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            // Add the Reward
            if (result.Data is RewardEditDto dto)
            {
                await rewardAdminService.AddReward(dto, CancellationToken.None);
                SnackBar.Add($"Reward: '{dto.Name}' saved", Severity.Success);
            }
            await GetRewards();
        }
    }
}
