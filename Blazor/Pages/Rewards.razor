@page "/rewards"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using SSW.Rewards.Admin.Components
@using SSW.Rewards.Admin.Components.Dialogs.Rewards
@using SSW.Rewards.Admin.Models.Interfaces
@using SSW.Rewards.Admin.Services
@using SSW.Rewards.Api

@attribute [Authorize]

@inject RewardsService _client
@inject IDialogService DialogService

<MudText Typo="Typo.h2">Rewards</MudText>
<MudText Typo="Typo.body1">All rewards available to be claimed</MudText>

<AdminTable Items="@(_rewardItemsViewModels?.Cast<ITableItems>().ToList())"
            Headings="@_headings"
            TableTitle="Rewards"
            SearchPlaceholderText="Search for a Reward"
            IsLoading="@Loading"
            OnClick="@(OnRowClicked)"/>

@* TODO: Make this like current rewards (sticky to the bottom right with padding from the bottom of the table when scrolled to the bottom)   *@
<MudFab Class="sticky object-right-bottom" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@((e) => OpenDialog(disableBackdropClick))"/>


@* TODO: Move this to the code behind? *@
@code {
    DialogOptions disableBackdropClick = new DialogOptions() { DisableBackdropClick = true };
    protected bool Loading = true;
    
    private RewardAdminListViewModel? _model;
    protected RewardAdminListViewModel? Model
    {
        get => _model;
        set
        {
            _model = value;
            _rewardItemsViewModels = _model?.Rewards
                .Select(RewardItemsViewModel.FromDto)
                .ToList();
            Loading = false;
        }
    }
    private List<RewardItemsViewModel>? _rewardItemsViewModels;
    
    private readonly List<TableHeaders> _headings = new()
    {
        new TableHeaders { Heading = "Code", Overwrite = true },
        new TableHeaders { Heading = "Name" },
        new TableHeaders { Heading = "Cost" },
    };
    
    private async Task OnRowClicked(TableRowClickEventArgs<ITableItems> obj)
    {
        var item = _model?.Rewards.FirstOrDefault(x => x.Id == obj.Item.Id);

        // TODO: Implement this on the Api 
        //! Note: This is a readonly Dialog, which only allows for viewing and deleting.
        var parameters = new DialogParameters { ["dto"]=item };
        var dialog = DialogService.Show<RewardsEditDialog>("Edit a Reward", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            // TODO: Update the Reward 
            if (result.Data is int id)
            {
                await _client.DeleteAsync(new(){ Id = id });
            }
            await GetRewards();
        }
    }

    private async Task OpenDialog(DialogOptions options)
    {
        var dialog = DialogService.Show<AddRewardDialog>("Create a Reward", options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            // Add the Reward
            if (result.Data is RewardViewModel dto)
            {
                await _client.AddAsync(new AddRewardCommand
                {
                    Name = dto.Name,
                    Cost = dto.Cost,
                    RewardType = RewardType.Digital
                });
            }
            await GetRewards();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetRewards();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {

        }

        await base.OnInitializedAsync();
    }
    
    protected async Task GetRewards()
    {
        try
        {
            Model = await _client.AdminListAsync();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {

        }
    }

    public class RewardItemsViewModel : ITableItems
    {
        public int Cost { get; set; }
        public string Code { get; set; }
        
        public int Id { get; set; }
        public string Name { get; set; }
        public RenderFragment OverwriteRowRender(string rowName)
        {
            if (rowName == "Code")
            {
                return @<AdminQRCode Height="100" QRCodeString="@Code"/>;
            }
            return null;
        }
        public static RewardItemsViewModel FromDto(RewardAdminViewModel dto)
            => new()
            {
                Id = dto.Id,
                Name = dto.Name,
                Cost = dto.Cost,
                Code = dto.Code,
            };
    }
}
