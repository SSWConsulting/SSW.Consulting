@page "/leaderboard"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SSW.Rewards.Admin.Models.Leaderboard
@using SSW.Rewards.Admin.Services
@using Microsoft.AspNetCore.Authorization
@using SSW.Rewards.Admin.Models.Interfaces
@using SSW.Rewards.Admin.Components

@attribute [Authorize]

@inject LeaderboardService httpService

<MudText Typo="Typo.h2">Leaderboard</MudText>
<MudText Typo="Typo.body1">All users ranked by total points</MudText>

<AdminTable Items="@(_leaderboardItemsViewModels?.Cast<ITableItems>().ToList())"
            Headings="@_headings"
            TableTitle="Leaderboard"
            SearchPlaceholderText="Search the leaderboard by name"
            IsLoading="@Loading"
            OnClick="@(OnRowClicked)"/>

@* TODO: Move this to the code behind? *@
@code {
    protected bool Loading = true;
    
    private _LeaderboardListViewModel? _model;
    protected _LeaderboardListViewModel? Model
    {
        get => _model;
        set
        {
            _model = value;
            _leaderboardItemsViewModels = _model?.Users
                .Select(LeaderboardItemsViewModel.FromDto)
                .ToList();
            Loading = false;
        }
    }
    
    private List<LeaderboardItemsViewModel>? _leaderboardItemsViewModels;
    private readonly List<TableHeaders> _headings = new()
    {
        new TableHeaders { Heading = "Rank"},
        new TableHeaders { Heading = "Name", Overwrite = true  },
        new TableHeaders { Heading = "Points" },
    };

    private void OnRowClicked(TableRowClickEventArgs<ITableItems> obj)
    {
        var item = _model?.Users.FirstOrDefault(x => x.UserId == obj.Item.Id);

        Console.WriteLine(item?.Name);
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model = await httpService.GetLeaderboard();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {

        }

        await base.OnInitializedAsync();
    }

    public class LeaderboardItemsViewModel : ITableItems
    {
        public int Points { get; set; }
        public int Rank { get; set; }
        public Uri ProfilePic { get; set; }
        
        public int Id { get; set; }
        public string Name { get; set; }
        public RenderFragment OverwriteRowRender(string rowName)
        {
            if (rowName == nameof(Name))
            {
                return @<div>
                           <MudImage Src="@ProfilePic.AbsoluteUri" Alt="Users Profile Picture" Elevation="5" Class="rounded-circle"/>
                           <MudText Typo="Typo.body1">@Name</MudText>
                       </div>;
            }
            return null;
        }
        public static LeaderboardItemsViewModel FromDto(LeaderboardUserDto dto)
            => new()
            {
                Id = dto.UserId,
                Name = dto.Name,
                Rank = dto.Rank,
                Points = dto.Points,
                ProfilePic = dto.ProfilePic
            };
    }
}
