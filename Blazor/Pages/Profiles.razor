@page "/profiles"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SSW.Rewards.Admin.Models.Staff
@using SSW.Rewards.Admin.Services
@using Microsoft.AspNetCore.Authorization
@using SSW.Rewards.Admin.Components
@using SSW.Rewards.Admin.Models.Interfaces

@attribute [Authorize]

@inject StaffService httpService
@inject IDialogService DialogService

<MudText Typo="Typo.h2">Profiles</MudText>
<MudText Typo="Typo.body1">All staff profiles available for editing</MudText>

<AdminTable Items="@(_ProfileItemsViewModels?.Cast<ITableItems>().ToList())"
            Headings="@_headings"
            TableTitle="Rewards"
            SearchPlaceholderText="Search for a Reward"
            IsLoading="@Loading"
            OnClick="@(OnRowClicked)"/>

@* TODO: Make this like current rewards (sticky to the bottom right with padding from the bottom of the table when scrolled to the bottom)   *@
<MudFab Class="sticky object-right-bottom" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@((e) => OpenDialog(disableBackdropClick))"/>

@* TODO: Move this to the code behind *@
@code {
    DialogOptions disableBackdropClick = new DialogOptions() { DisableBackdropClick = true };
    protected bool Loading = true;
    
    private _StaffListViewModel? _model;
    protected _StaffListViewModel? Model
    {
        get => _model;
        set
        {
            _model = value;
            _ProfileItemsViewModels = _model?.Staff
                .Select(ProfileItemsViewModel.FromDto)
                .ToList();
            Loading = false;
        }
    }
    
    private List<ProfileItemsViewModel>? _ProfileItemsViewModels;
    
    private readonly List<TableHeaders> _headings = new()
    {
        new TableHeaders { Heading = "Name" },
        new TableHeaders { Heading = "Title" }
    };
    
    private void OnRowClicked(TableRowClickEventArgs<ITableItems> obj)
    {
        var item = _model?.Staff.FirstOrDefault(x => x.Id == obj.Item.Id);

        Console.WriteLine(item?.Name);
    }

    private void OpenDialog(DialogOptions options)
    {
        DialogService.Show<AddAchievementsDialog>("Create a Staff Profile", options);
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model = await httpService.GetStaff();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {

        }

        await base.OnInitializedAsync();
    }

    public class ProfileItemsViewModel : ITableItems
    {
        public string Title { get; set; }
        
        public int Id { get; set; }
        public string Name { get; set; }
        public RenderFragment OverwriteRowRender(string rowName)
        {
            throw new NotImplementedException();
        }
        public static ProfileItemsViewModel FromDto(StaffDto dto)
            => new()
            {
                Id = dto.Id,
                Name = dto.Name,
                Title = dto.Title,
            };
    }
}