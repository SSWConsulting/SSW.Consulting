@page "/achievements"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using SSW.Rewards.Admin.Components
@using SSW.Rewards.Admin.Components.Dialogs.Achievements
@using SSW.Rewards.Admin.Models.Interfaces
@attribute [Authorize]

@inject IAchievementClient _client
@inject IDialogService DialogService

<MudText Typo="Typo.h2">Achievements</MudText>
<MudText Typo="Typo.body1">All achievevements available for scanning</MudText>

<AdminTable Items="@(_AchievementItemsViewModels?.Cast<ITableItems>().ToList())"
            Headings="@_headings"
            TableTitle="Achievements"
            SearchPlaceholderText="Search for an Achievement"
            IsLoading="@Loading"
            OnClick="@(OnRowClicked)"/>

@* TODO: Make this like current rewards (sticky to the bottom right with padding from the bottom of the table when scrolled to the bottom)   *@
<MudFab Class="sticky object-right-bottom" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@((e) => OpenDialog(disableBackdropClick))"/>


@* TODO: Clean this code up - Move it into code behind *@

@code {
    DialogOptions disableBackdropClick = new DialogOptions() { DisableBackdropClick = true };
    protected bool Loading = true;

    private readonly List<TableHeaders> _headings = new()
    {
        new TableHeaders { Heading = "Code", Overwrite = true },
        new TableHeaders { Heading = "Name" },
        new TableHeaders { Heading = "Value" },
    };

    private AchievementAdminListViewModel? _model;

    protected AchievementAdminListViewModel? Model
    {
        get => _model;
        set
        {
            _model = value;

            _AchievementItemsViewModels = _model.Achievements
                .Select(AchievementItemsViewModel.FromDto)
                .ToList();
            Loading = false;
        }
    }

    private List<AchievementItemsViewModel> _AchievementItemsViewModels;

    private async Task OnRowClicked(TableRowClickEventArgs<ITableItems> obj)
    {
        var item = _model.Achievements.FirstOrDefault(x => x.Id == obj.Item.Id);

        // TODO: Implement an upsert on the Api 
        //! Note: This is a readonly Dialog, which only allows for viewing and deleting.
        var parameters = new DialogParameters { ["dto"] = item };
        var dialog = DialogService.Show<AchievementEditDialog>("Edit an Achievement", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            if (result.Data is int id)
            {
                //! Note: This can error as the StaffMembers table has a reference to Achievements 
                await _client.DeleteAsync(new(){ Id = id });
            }
            if (result.Data is AchievementAdminViewModel dto)
            {
                await _client.UpdateAchievementAsync(new UpdateAchievementCommand
                {
                    Id = dto.Id,
                    Value = dto.Value
                });
            }
            if (result.Data is AssignReward usr)
            {
                if (usr?.Id == null) return;
                    
                // TODO: Add nice notification for returned status
                await _client.ClaimForUserAsync(new ClaimAchievementForUserCommand
                {
                    Code = usr.Code,
                    UserId = usr.Id
                });
            }
            await GetAchievements();
        }
    }

    private async Task OpenDialog(DialogOptions options)
    {
        var dialog = DialogService.Show<AddAchievementsDialog>("Create an Achievement", options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            if (result.Data is AchievementAdminViewModel dto)
            {
                try
                {
                    await _client.CreateAsync(
                        new CreateAchievementCommand
                        {
                            Name = dto.Name,
                            Value = dto.Value
                        }
                        );
                }
                catch
                {
                    //Log and show nice notification
                }

            }
            await GetAchievements();
        }
    }

    private async Task GetAchievements()
    {
        try
        {
            Model = await _client.AdminListAsync();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
    // ignored
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAchievements();

        await base.OnInitializedAsync();
    }

    public class AchievementItemsViewModel : ITableItems
    {
        public int Value { get; set; }
        public string Code { get; set; }

        public int Id { get; set; }
        public string Name { get; set; }

        public static AchievementItemsViewModel FromDto(AchievementAdminViewModel dto)
            => new()
            {
                Id = dto.Id,
                Name = dto.Name,
                Value = dto.Value,
                Code = dto.Code,
            };

        public RenderFragment OverwriteRowRender(string rowName)
        {
            if (rowName == "Code")
            {
                return @<AdminQRCode Height="100" QRCodeString="@Code"/>;
            }
            return null;
        }
    }

}