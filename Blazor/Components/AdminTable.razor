@using SSW.Rewards.Admin.Models.Interfaces
<MudTable
    Items="@Items"
    Dense="@Dense"
    Hover="@Hover"
    Bordered="@Bordered"
    Striped="@Striped"
    Filter="new Func<ITableItems, bool>(FilterItemsFunc)"
    @bind-SelectedItem="_selectedItem"
    OnRowClick="OnClick"
    Loading="@IsLoading">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@TableTitle</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchText" Placeholder="@SearchPlaceholderText" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        @if (Headings != null)
        {
            foreach (var head in Headings)
            {
                <MudTh>@head.Heading</MudTh>
            }
        }
    </HeaderContent>
    <RowTemplate>
        @if (Headings != null)
        {
            foreach (var row in Headings)
            {
                if (!row.Overwrite)
                {
                    <MudTd DataLabel="@row.Heading">@context.GetType().GetProperty(row.Heading)?.GetValue(context, null)</MudTd>
                }
                else
                {
                    <MudTd DataLabel="@row.Heading">@context.OverwriteRowRender(row.Heading)</MudTd>
                }
            }
        }
    </RowTemplate>
    <NoRecordsContent>
        @for (int i = 0; i < 5; i++)
        {
            <div class="d-flex flex-grow-1">
                <MudSkeleton Class="flex-1" Height="200px"/>
            </div>
        }
    </NoRecordsContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>


@code {

    [Parameter]
    public bool Dense { get; set; } = false;

    [Parameter]
    public bool Hover { get; set; } = true;

    [Parameter]
    public bool Striped { get; set; } = false;

    [Parameter]
    public bool Bordered { get; set; } = false;

    [Parameter]
    public bool IsLoading { get; set; } = true;

    [Parameter]
    public string? TableTitle { get; set; }

    [Parameter]
    public string? SearchPlaceholderText { get; set; }

    [Parameter]
    public List<TableHeaders>? Headings { get; set; }

    [Parameter]
    public IEnumerable<ITableItems>? Items { get; set; }

    [Parameter]
    public EventCallback<TableRowClickEventArgs<ITableItems>> OnClick { get; set; }

    private string _searchText = "";
    private ITableItems? _selectedItem = null;
    private HashSet<ITableItems> _selectedItems = new HashSet<ITableItems>();

    private bool FilterItemsFunc(ITableItems item) => FilterFunc(item, _searchText);

    //! Note: This is only filtering on the name
    private bool FilterFunc(ITableItems item, string searchString)
    {
        return string.IsNullOrWhiteSpace(searchString) || item.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

}